// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package topology

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type DistributedRPC interface {
	// Parameters:
	//  - FunctionName
	//  - FuncArgs_
	Execute(functionName string, funcArgs string) (r string, err error)
}

type DistributedRPCClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDistributedRPCClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DistributedRPCClient {
	return &DistributedRPCClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDistributedRPCClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DistributedRPCClient {
	return &DistributedRPCClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - FunctionName
//  - FuncArgs_
func (p *DistributedRPCClient) Execute(functionName string, funcArgs string) (r string, err error) {
	if err = p.sendExecute(functionName, funcArgs); err != nil {
		return
	}
	return p.recvExecute()
}

func (p *DistributedRPCClient) sendExecute(functionName string, funcArgs string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("execute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ExecuteArgs{
		FunctionName: functionName,
		FuncArgs_:    funcArgs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DistributedRPCClient) recvExecute() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute failed: out of sequence response")
		return
	}
	result := ExecuteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Aze != nil {
		err = result.Aze
		return
	}
	value = result.GetSuccess()
	return
}

type DistributedRPCProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DistributedRPC
}

func (p *DistributedRPCProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DistributedRPCProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DistributedRPCProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDistributedRPCProcessor(handler DistributedRPC) *DistributedRPCProcessor {

	self162 := &DistributedRPCProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self162.processorMap["execute"] = &distributedRPCProcessorExecute{handler: handler}
	return self162
}

func (p *DistributedRPCProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x163 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x163.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x163

}

type distributedRPCProcessorExecute struct {
	handler DistributedRPC
}

func (p *distributedRPCProcessorExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExecuteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ExecuteResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Execute(args.FunctionName, args.FuncArgs_); err2 != nil {
		switch v := err2.(type) {
		case *DRPCExecutionException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: "+err2.Error())
			oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ExecuteArgs struct {
	FunctionName string `thrift:"functionName,1" json:"functionName"`
	FuncArgs_    string `thrift:"funcArgs,2" json:"funcArgs"`
}

func NewExecuteArgs() *ExecuteArgs {
	return &ExecuteArgs{}
}

func (p *ExecuteArgs) GetFunctionName() string {
	return p.FunctionName
}

func (p *ExecuteArgs) GetFuncArgs_() string {
	return p.FuncArgs_
}
func (p *ExecuteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecuteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FunctionName = v
	}
	return nil
}

func (p *ExecuteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FuncArgs_ = v
	}
	return nil
}

func (p *ExecuteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("functionName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:functionName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunctionName)); err != nil {
		return fmt.Errorf("%T.functionName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:functionName: %s", p, err)
	}
	return err
}

func (p *ExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("funcArgs", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:funcArgs: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FuncArgs_)); err != nil {
		return fmt.Errorf("%T.funcArgs (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:funcArgs: %s", p, err)
	}
	return err
}

func (p *ExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteArgs(%+v)", *p)
}

type ExecuteResult struct {
	Success *string                 `thrift:"success,0" json:"success"`
	E       *DRPCExecutionException `thrift:"e,1" json:"e"`
	Aze     *AuthorizationException `thrift:"aze,2" json:"aze"`
}

func NewExecuteResult() *ExecuteResult {
	return &ExecuteResult{}
}

var ExecuteResult_Success_DEFAULT string

func (p *ExecuteResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ExecuteResult_Success_DEFAULT
	}
	return *p.Success
}

var ExecuteResult_E_DEFAULT *DRPCExecutionException

func (p *ExecuteResult) GetE() *DRPCExecutionException {
	if !p.IsSetE() {
		return ExecuteResult_E_DEFAULT
	}
	return p.E
}

var ExecuteResult_Aze_DEFAULT *AuthorizationException

func (p *ExecuteResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return ExecuteResult_Aze_DEFAULT
	}
	return p.Aze
}
func (p *ExecuteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExecuteResult) IsSetE() bool {
	return p.E != nil
}

func (p *ExecuteResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *ExecuteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecuteResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ExecuteResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &DRPCExecutionException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ExecuteResult) ReadField2(iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Aze, err)
	}
	return nil
}

func (p *ExecuteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ExecuteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin("aze", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:aze: %s", p, err)
		}
		if err := p.Aze.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Aze, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:aze: %s", p, err)
		}
	}
	return err
}

func (p *ExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteResult(%+v)", *p)
}
