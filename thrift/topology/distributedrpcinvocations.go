// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package topology

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type DistributedRPCInvocations interface {
	// Parameters:
	//  - Id
	//  - Result_
	Result_(id string, result string) (err error)
	// Parameters:
	//  - FunctionName
	FetchRequest(functionName string) (r *DRPCRequest, err error)
	// Parameters:
	//  - Id
	FailRequest(id string) (err error)
}

type DistributedRPCInvocationsClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDistributedRPCInvocationsClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DistributedRPCInvocationsClient {
	return &DistributedRPCInvocationsClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDistributedRPCInvocationsClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DistributedRPCInvocationsClient {
	return &DistributedRPCInvocationsClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Id
//  - Result_
func (p *DistributedRPCInvocationsClient) Result_(id string, result string) (err error) {
	if err = p.sendResult_(id, result); err != nil {
		return
	}
	return p.recvResult_()
}

func (p *DistributedRPCInvocationsClient) sendResult_(id string, result string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("result", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ResultArgs{
		Id:      id,
		Result_: result,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DistributedRPCInvocationsClient) recvResult_() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "result failed: out of sequence response")
		return
	}
	result := ResultResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Aze != nil {
		err = result.Aze
		return
	}
	return
}

// Parameters:
//  - FunctionName
func (p *DistributedRPCInvocationsClient) FetchRequest(functionName string) (r *DRPCRequest, err error) {
	if err = p.sendFetchRequest(functionName); err != nil {
		return
	}
	return p.recvFetchRequest()
}

func (p *DistributedRPCInvocationsClient) sendFetchRequest(functionName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchRequest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchRequestArgs{
		FunctionName: functionName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DistributedRPCInvocationsClient) recvFetchRequest() (value *DRPCRequest, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchRequest failed: out of sequence response")
		return
	}
	result := FetchRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Aze != nil {
		err = result.Aze
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Id
func (p *DistributedRPCInvocationsClient) FailRequest(id string) (err error) {
	if err = p.sendFailRequest(id); err != nil {
		return
	}
	return p.recvFailRequest()
}

func (p *DistributedRPCInvocationsClient) sendFailRequest(id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("failRequest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FailRequestArgs{
		Id: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DistributedRPCInvocationsClient) recvFailRequest() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "failRequest failed: out of sequence response")
		return
	}
	result := FailRequestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Aze != nil {
		err = result.Aze
		return
	}
	return
}

type DistributedRPCInvocationsProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DistributedRPCInvocations
}

func (p *DistributedRPCInvocationsProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DistributedRPCInvocationsProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DistributedRPCInvocationsProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDistributedRPCInvocationsProcessor(handler DistributedRPCInvocations) *DistributedRPCInvocationsProcessor {

	self172 := &DistributedRPCInvocationsProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self172.processorMap["result"] = &distributedRPCInvocationsProcessorResult_{handler: handler}
	self172.processorMap["fetchRequest"] = &distributedRPCInvocationsProcessorFetchRequest{handler: handler}
	self172.processorMap["failRequest"] = &distributedRPCInvocationsProcessorFailRequest{handler: handler}
	return self172
}

func (p *DistributedRPCInvocationsProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x173 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x173.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x173

}

type distributedRPCInvocationsProcessorResult_ struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("result", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ResultResult{}
	var err2 error
	if err2 = p.handler.Result_(args.Id, args.Result_); err2 != nil {
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing result: "+err2.Error())
			oprot.WriteMessageBegin("result", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("result", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type distributedRPCInvocationsProcessorFetchRequest struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorFetchRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchRequestResult{}
	var retval *DRPCRequest
	var err2 error
	if retval, err2 = p.handler.FetchRequest(args.FunctionName); err2 != nil {
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchRequest: "+err2.Error())
			oprot.WriteMessageBegin("fetchRequest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type distributedRPCInvocationsProcessorFailRequest struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorFailRequest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FailRequestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("failRequest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FailRequestResult{}
	var err2 error
	if err2 = p.handler.FailRequest(args.Id); err2 != nil {
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing failRequest: "+err2.Error())
			oprot.WriteMessageBegin("failRequest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("failRequest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ResultArgs struct {
	Id      string `thrift:"id,1" json:"id"`
	Result_ string `thrift:"result,2" json:"result"`
}

func NewResultArgs() *ResultArgs {
	return &ResultArgs{}
}

func (p *ResultArgs) GetId() string {
	return p.Id
}

func (p *ResultArgs) GetResult_() string {
	return p.Result_
}
func (p *ResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResultArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *ResultArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *ResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("result_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *ResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:result: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Result_)); err != nil {
		return fmt.Errorf("%T.result (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:result: %s", p, err)
	}
	return err
}

func (p *ResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultArgs(%+v)", *p)
}

type ResultResult struct {
	Aze *AuthorizationException `thrift:"aze,1" json:"aze"`
}

func NewResultResult() *ResultResult {
	return &ResultResult{}
}

var ResultResult_Aze_DEFAULT *AuthorizationException

func (p *ResultResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return ResultResult_Aze_DEFAULT
	}
	return p.Aze
}
func (p *ResultResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *ResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResultResult) ReadField1(iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Aze, err)
	}
	return nil
}

func (p *ResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("result_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ResultResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin("aze", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:aze: %s", p, err)
		}
		if err := p.Aze.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Aze, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:aze: %s", p, err)
		}
	}
	return err
}

func (p *ResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultResult(%+v)", *p)
}

type FetchRequestArgs struct {
	FunctionName string `thrift:"functionName,1" json:"functionName"`
}

func NewFetchRequestArgs() *FetchRequestArgs {
	return &FetchRequestArgs{}
}

func (p *FetchRequestArgs) GetFunctionName() string {
	return p.FunctionName
}
func (p *FetchRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FunctionName = v
	}
	return nil
}

func (p *FetchRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchRequest_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("functionName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:functionName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FunctionName)); err != nil {
		return fmt.Errorf("%T.functionName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:functionName: %s", p, err)
	}
	return err
}

func (p *FetchRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchRequestArgs(%+v)", *p)
}

type FetchRequestResult struct {
	Success *DRPCRequest            `thrift:"success,0" json:"success"`
	Aze     *AuthorizationException `thrift:"aze,1" json:"aze"`
}

func NewFetchRequestResult() *FetchRequestResult {
	return &FetchRequestResult{}
}

var FetchRequestResult_Success_DEFAULT *DRPCRequest

func (p *FetchRequestResult) GetSuccess() *DRPCRequest {
	if !p.IsSetSuccess() {
		return FetchRequestResult_Success_DEFAULT
	}
	return p.Success
}

var FetchRequestResult_Aze_DEFAULT *AuthorizationException

func (p *FetchRequestResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return FetchRequestResult_Aze_DEFAULT
	}
	return p.Aze
}
func (p *FetchRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchRequestResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *FetchRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchRequestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DRPCRequest{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FetchRequestResult) ReadField1(iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Aze, err)
	}
	return nil
}

func (p *FetchRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchRequest_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchRequestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin("aze", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:aze: %s", p, err)
		}
		if err := p.Aze.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Aze, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:aze: %s", p, err)
		}
	}
	return err
}

func (p *FetchRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchRequestResult(%+v)", *p)
}

type FailRequestArgs struct {
	Id string `thrift:"id,1" json:"id"`
}

func NewFailRequestArgs() *FailRequestArgs {
	return &FailRequestArgs{}
}

func (p *FailRequestArgs) GetId() string {
	return p.Id
}
func (p *FailRequestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FailRequestArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *FailRequestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("failRequest_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FailRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *FailRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FailRequestArgs(%+v)", *p)
}

type FailRequestResult struct {
	Aze *AuthorizationException `thrift:"aze,1" json:"aze"`
}

func NewFailRequestResult() *FailRequestResult {
	return &FailRequestResult{}
}

var FailRequestResult_Aze_DEFAULT *AuthorizationException

func (p *FailRequestResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return FailRequestResult_Aze_DEFAULT
	}
	return p.Aze
}
func (p *FailRequestResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *FailRequestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FailRequestResult) ReadField1(iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Aze, err)
	}
	return nil
}

func (p *FailRequestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("failRequest_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FailRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin("aze", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:aze: %s", p, err)
		}
		if err := p.Aze.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Aze, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:aze: %s", p, err)
		}
	}
	return err
}

func (p *FailRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FailRequestResult(%+v)", *p)
}
