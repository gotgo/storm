// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package topology

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TopologyInitialStatus int64

const (
	TopologyInitialStatus_ACTIVE   TopologyInitialStatus = 1
	TopologyInitialStatus_INACTIVE TopologyInitialStatus = 2
)

func (p TopologyInitialStatus) String() string {
	switch p {
	case TopologyInitialStatus_ACTIVE:
		return "TopologyInitialStatus_ACTIVE"
	case TopologyInitialStatus_INACTIVE:
		return "TopologyInitialStatus_INACTIVE"
	}
	return "<UNSET>"
}

func TopologyInitialStatusFromString(s string) (TopologyInitialStatus, error) {
	switch s {
	case "TopologyInitialStatus_ACTIVE":
		return TopologyInitialStatus_ACTIVE, nil
	case "TopologyInitialStatus_INACTIVE":
		return TopologyInitialStatus_INACTIVE, nil
	}
	return TopologyInitialStatus(0), fmt.Errorf("not a valid TopologyInitialStatus string")
}

func TopologyInitialStatusPtr(v TopologyInitialStatus) *TopologyInitialStatus { return &v }

type JavaObjectArg struct {
	IntArg    int32   `thrift:"int_arg,1" json:"int_arg"`
	LongArg   int64   `thrift:"long_arg,2" json:"long_arg"`
	StringArg string  `thrift:"string_arg,3" json:"string_arg"`
	BoolArg   bool    `thrift:"bool_arg,4" json:"bool_arg"`
	BinaryArg []byte  `thrift:"binary_arg,5" json:"binary_arg"`
	DoubleArg float64 `thrift:"double_arg,6" json:"double_arg"`
}

func NewJavaObjectArg() *JavaObjectArg {
	return &JavaObjectArg{}
}

func (p *JavaObjectArg) GetIntArg() int32 {
	return p.IntArg
}

func (p *JavaObjectArg) GetLongArg() int64 {
	return p.LongArg
}

func (p *JavaObjectArg) GetStringArg() string {
	return p.StringArg
}

func (p *JavaObjectArg) GetBoolArg() bool {
	return p.BoolArg
}

func (p *JavaObjectArg) GetBinaryArg() []byte {
	return p.BinaryArg
}

func (p *JavaObjectArg) GetDoubleArg() float64 {
	return p.DoubleArg
}
func (p *JavaObjectArg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JavaObjectArg) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IntArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LongArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.StringArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.BoolArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.BinaryArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.DoubleArg = v
	}
	return nil
}

func (p *JavaObjectArg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JavaObjectArg"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JavaObjectArg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_arg", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:int_arg: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IntArg)); err != nil {
		return fmt.Errorf("%T.int_arg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:int_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("long_arg", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:long_arg: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LongArg)); err != nil {
		return fmt.Errorf("%T.long_arg (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:long_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("string_arg", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:string_arg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StringArg)); err != nil {
		return fmt.Errorf("%T.string_arg (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:string_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bool_arg", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:bool_arg: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.BoolArg)); err != nil {
		return fmt.Errorf("%T.bool_arg (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:bool_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("binary_arg", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:binary_arg: %s", p, err)
	}
	if err := oprot.WriteBinary(p.BinaryArg); err != nil {
		return fmt.Errorf("%T.binary_arg (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:binary_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("double_arg", thrift.DOUBLE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:double_arg: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.DoubleArg)); err != nil {
		return fmt.Errorf("%T.double_arg (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:double_arg: %s", p, err)
	}
	return err
}

func (p *JavaObjectArg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JavaObjectArg(%+v)", *p)
}

type JavaObject struct {
	FullClassName string           `thrift:"full_class_name,1,required" json:"full_class_name"`
	ArgsList      []*JavaObjectArg `thrift:"args_list,2,required" json:"args_list"`
}

func NewJavaObject() *JavaObject {
	return &JavaObject{}
}

func (p *JavaObject) GetFullClassName() string {
	return p.FullClassName
}

func (p *JavaObject) GetArgsList() []*JavaObjectArg {
	return p.ArgsList
}
func (p *JavaObject) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JavaObject) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FullClassName = v
	}
	return nil
}

func (p *JavaObject) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*JavaObjectArg, 0, size)
	p.ArgsList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &JavaObjectArg{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.ArgsList = append(p.ArgsList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *JavaObject) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JavaObject"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JavaObject) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("full_class_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:full_class_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FullClassName)); err != nil {
		return fmt.Errorf("%T.full_class_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:full_class_name: %s", p, err)
	}
	return err
}

func (p *JavaObject) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("args_list", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:args_list: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArgsList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ArgsList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:args_list: %s", p, err)
	}
	return err
}

func (p *JavaObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JavaObject(%+v)", *p)
}

type NullStruct struct {
}

func NewNullStruct() *NullStruct {
	return &NullStruct{}
}

func (p *NullStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NullStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NullStruct"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NullStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NullStruct(%+v)", *p)
}

type GlobalStreamId struct {
	ComponentId string `thrift:"componentId,1,required" json:"componentId"`
	StreamId    string `thrift:"streamId,2,required" json:"streamId"`
}

func NewGlobalStreamId() *GlobalStreamId {
	return &GlobalStreamId{}
}

func (p *GlobalStreamId) GetComponentId() string {
	return p.ComponentId
}

func (p *GlobalStreamId) GetStreamId() string {
	return p.StreamId
}
func (p *GlobalStreamId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GlobalStreamId) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ComponentId = v
	}
	return nil
}

func (p *GlobalStreamId) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StreamId = v
	}
	return nil
}

func (p *GlobalStreamId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GlobalStreamId"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GlobalStreamId) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("componentId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:componentId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComponentId)); err != nil {
		return fmt.Errorf("%T.componentId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:componentId: %s", p, err)
	}
	return err
}

func (p *GlobalStreamId) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("streamId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:streamId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.StreamId)); err != nil {
		return fmt.Errorf("%T.streamId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:streamId: %s", p, err)
	}
	return err
}

func (p *GlobalStreamId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GlobalStreamId(%+v)", *p)
}

type Grouping struct {
	Fields           []string    `thrift:"fields,1" json:"fields"`
	Shuffle          *NullStruct `thrift:"shuffle,2" json:"shuffle"`
	All              *NullStruct `thrift:"all,3" json:"all"`
	None             *NullStruct `thrift:"none,4" json:"none"`
	Direct           *NullStruct `thrift:"direct,5" json:"direct"`
	CustomObject     *JavaObject `thrift:"custom_object,6" json:"custom_object"`
	CustomSerialized []byte      `thrift:"custom_serialized,7" json:"custom_serialized"`
	LocalOrShuffle   *NullStruct `thrift:"local_or_shuffle,8" json:"local_or_shuffle"`
}

func NewGrouping() *Grouping {
	return &Grouping{}
}

func (p *Grouping) GetFields() []string {
	return p.Fields
}

var Grouping_Shuffle_DEFAULT *NullStruct

func (p *Grouping) GetShuffle() *NullStruct {
	if !p.IsSetShuffle() {
		return Grouping_Shuffle_DEFAULT
	}
	return p.Shuffle
}

var Grouping_All_DEFAULT *NullStruct

func (p *Grouping) GetAll() *NullStruct {
	if !p.IsSetAll() {
		return Grouping_All_DEFAULT
	}
	return p.All
}

var Grouping_None_DEFAULT *NullStruct

func (p *Grouping) GetNone() *NullStruct {
	if !p.IsSetNone() {
		return Grouping_None_DEFAULT
	}
	return p.None
}

var Grouping_Direct_DEFAULT *NullStruct

func (p *Grouping) GetDirect() *NullStruct {
	if !p.IsSetDirect() {
		return Grouping_Direct_DEFAULT
	}
	return p.Direct
}

var Grouping_CustomObject_DEFAULT *JavaObject

func (p *Grouping) GetCustomObject() *JavaObject {
	if !p.IsSetCustomObject() {
		return Grouping_CustomObject_DEFAULT
	}
	return p.CustomObject
}

func (p *Grouping) GetCustomSerialized() []byte {
	return p.CustomSerialized
}

var Grouping_LocalOrShuffle_DEFAULT *NullStruct

func (p *Grouping) GetLocalOrShuffle() *NullStruct {
	if !p.IsSetLocalOrShuffle() {
		return Grouping_LocalOrShuffle_DEFAULT
	}
	return p.LocalOrShuffle
}
func (p *Grouping) IsSetShuffle() bool {
	return p.Shuffle != nil
}

func (p *Grouping) IsSetAll() bool {
	return p.All != nil
}

func (p *Grouping) IsSetNone() bool {
	return p.None != nil
}

func (p *Grouping) IsSetDirect() bool {
	return p.Direct != nil
}

func (p *Grouping) IsSetCustomObject() bool {
	return p.CustomObject != nil
}

func (p *Grouping) IsSetLocalOrShuffle() bool {
	return p.LocalOrShuffle != nil
}

func (p *Grouping) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Grouping) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Fields = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Fields = append(p.Fields, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Grouping) ReadField2(iprot thrift.TProtocol) error {
	p.Shuffle = &NullStruct{}
	if err := p.Shuffle.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Shuffle, err)
	}
	return nil
}

func (p *Grouping) ReadField3(iprot thrift.TProtocol) error {
	p.All = &NullStruct{}
	if err := p.All.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.All, err)
	}
	return nil
}

func (p *Grouping) ReadField4(iprot thrift.TProtocol) error {
	p.None = &NullStruct{}
	if err := p.None.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.None, err)
	}
	return nil
}

func (p *Grouping) ReadField5(iprot thrift.TProtocol) error {
	p.Direct = &NullStruct{}
	if err := p.Direct.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Direct, err)
	}
	return nil
}

func (p *Grouping) ReadField6(iprot thrift.TProtocol) error {
	p.CustomObject = &JavaObject{}
	if err := p.CustomObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CustomObject, err)
	}
	return nil
}

func (p *Grouping) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.CustomSerialized = v
	}
	return nil
}

func (p *Grouping) ReadField8(iprot thrift.TProtocol) error {
	p.LocalOrShuffle = &NullStruct{}
	if err := p.LocalOrShuffle.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LocalOrShuffle, err)
	}
	return nil
}

func (p *Grouping) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Grouping"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Grouping) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fields", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:fields: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Fields)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Fields {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:fields: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shuffle", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:shuffle: %s", p, err)
	}
	if err := p.Shuffle.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Shuffle, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:shuffle: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("all", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:all: %s", p, err)
	}
	if err := p.All.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.All, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:all: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("none", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:none: %s", p, err)
	}
	if err := p.None.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.None, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:none: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direct", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:direct: %s", p, err)
	}
	if err := p.Direct.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Direct, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:direct: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("custom_object", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:custom_object: %s", p, err)
	}
	if err := p.CustomObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.CustomObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:custom_object: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("custom_serialized", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:custom_serialized: %s", p, err)
	}
	if err := oprot.WriteBinary(p.CustomSerialized); err != nil {
		return fmt.Errorf("%T.custom_serialized (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:custom_serialized: %s", p, err)
	}
	return err
}

func (p *Grouping) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("local_or_shuffle", thrift.STRUCT, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:local_or_shuffle: %s", p, err)
	}
	if err := p.LocalOrShuffle.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.LocalOrShuffle, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:local_or_shuffle: %s", p, err)
	}
	return err
}

func (p *Grouping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Grouping(%+v)", *p)
}

type StreamInfo struct {
	OutputFields []string `thrift:"output_fields,1,required" json:"output_fields"`
	Direct       bool     `thrift:"direct,2,required" json:"direct"`
}

func NewStreamInfo() *StreamInfo {
	return &StreamInfo{}
}

func (p *StreamInfo) GetOutputFields() []string {
	return p.OutputFields
}

func (p *StreamInfo) GetDirect() bool {
	return p.Direct
}
func (p *StreamInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StreamInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.OutputFields = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.OutputFields = append(p.OutputFields, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StreamInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Direct = v
	}
	return nil
}

func (p *StreamInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StreamInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StreamInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("output_fields", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:output_fields: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputFields)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OutputFields {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:output_fields: %s", p, err)
	}
	return err
}

func (p *StreamInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("direct", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:direct: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Direct)); err != nil {
		return fmt.Errorf("%T.direct (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:direct: %s", p, err)
	}
	return err
}

func (p *StreamInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamInfo(%+v)", *p)
}

type ShellComponent struct {
	ExecutionCommand string `thrift:"execution_command,1" json:"execution_command"`
	Script           string `thrift:"script,2" json:"script"`
}

func NewShellComponent() *ShellComponent {
	return &ShellComponent{}
}

func (p *ShellComponent) GetExecutionCommand() string {
	return p.ExecutionCommand
}

func (p *ShellComponent) GetScript() string {
	return p.Script
}
func (p *ShellComponent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShellComponent) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ExecutionCommand = v
	}
	return nil
}

func (p *ShellComponent) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Script = v
	}
	return nil
}

func (p *ShellComponent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShellComponent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShellComponent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execution_command", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:execution_command: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ExecutionCommand)); err != nil {
		return fmt.Errorf("%T.execution_command (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:execution_command: %s", p, err)
	}
	return err
}

func (p *ShellComponent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("script", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:script: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Script)); err != nil {
		return fmt.Errorf("%T.script (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:script: %s", p, err)
	}
	return err
}

func (p *ShellComponent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShellComponent(%+v)", *p)
}

type ComponentObject struct {
	SerializedJava []byte          `thrift:"serialized_java,1" json:"serialized_java"`
	Shell          *ShellComponent `thrift:"shell,2" json:"shell"`
	JavaObject     *JavaObject     `thrift:"java_object,3" json:"java_object"`
}

func NewComponentObject() *ComponentObject {
	return &ComponentObject{}
}

func (p *ComponentObject) GetSerializedJava() []byte {
	return p.SerializedJava
}

var ComponentObject_Shell_DEFAULT *ShellComponent

func (p *ComponentObject) GetShell() *ShellComponent {
	if !p.IsSetShell() {
		return ComponentObject_Shell_DEFAULT
	}
	return p.Shell
}

var ComponentObject_JavaObject_DEFAULT *JavaObject

func (p *ComponentObject) GetJavaObject() *JavaObject {
	if !p.IsSetJavaObject() {
		return ComponentObject_JavaObject_DEFAULT
	}
	return p.JavaObject
}
func (p *ComponentObject) IsSetShell() bool {
	return p.Shell != nil
}

func (p *ComponentObject) IsSetJavaObject() bool {
	return p.JavaObject != nil
}

func (p *ComponentObject) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComponentObject) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SerializedJava = v
	}
	return nil
}

func (p *ComponentObject) ReadField2(iprot thrift.TProtocol) error {
	p.Shell = &ShellComponent{}
	if err := p.Shell.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Shell, err)
	}
	return nil
}

func (p *ComponentObject) ReadField3(iprot thrift.TProtocol) error {
	p.JavaObject = &JavaObject{}
	if err := p.JavaObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.JavaObject, err)
	}
	return nil
}

func (p *ComponentObject) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComponentObject"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComponentObject) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serialized_java", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:serialized_java: %s", p, err)
	}
	if err := oprot.WriteBinary(p.SerializedJava); err != nil {
		return fmt.Errorf("%T.serialized_java (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:serialized_java: %s", p, err)
	}
	return err
}

func (p *ComponentObject) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shell", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:shell: %s", p, err)
	}
	if err := p.Shell.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Shell, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:shell: %s", p, err)
	}
	return err
}

func (p *ComponentObject) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("java_object", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:java_object: %s", p, err)
	}
	if err := p.JavaObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.JavaObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:java_object: %s", p, err)
	}
	return err
}

func (p *ComponentObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentObject(%+v)", *p)
}

type ComponentCommon struct {
	Inputs          map[*GlobalStreamId]*Grouping `thrift:"inputs,1,required" json:"inputs"`
	Streams         map[string]*StreamInfo        `thrift:"streams,2,required" json:"streams"`
	ParallelismHint *int32                        `thrift:"parallelism_hint,3" json:"parallelism_hint"`
	JsonConf        *string                       `thrift:"json_conf,4" json:"json_conf"`
}

func NewComponentCommon() *ComponentCommon {
	return &ComponentCommon{}
}

func (p *ComponentCommon) GetInputs() map[*GlobalStreamId]*Grouping {
	return p.Inputs
}

func (p *ComponentCommon) GetStreams() map[string]*StreamInfo {
	return p.Streams
}

var ComponentCommon_ParallelismHint_DEFAULT int32

func (p *ComponentCommon) GetParallelismHint() int32 {
	if !p.IsSetParallelismHint() {
		return ComponentCommon_ParallelismHint_DEFAULT
	}
	return *p.ParallelismHint
}

var ComponentCommon_JsonConf_DEFAULT string

func (p *ComponentCommon) GetJsonConf() string {
	if !p.IsSetJsonConf() {
		return ComponentCommon_JsonConf_DEFAULT
	}
	return *p.JsonConf
}
func (p *ComponentCommon) IsSetParallelismHint() bool {
	return p.ParallelismHint != nil
}

func (p *ComponentCommon) IsSetJsonConf() bool {
	return p.JsonConf != nil
}

func (p *ComponentCommon) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComponentCommon) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[*GlobalStreamId]*Grouping, size)
	p.Inputs = tMap
	for i := 0; i < size; i++ {
		_key3 := &GlobalStreamId{}
		if err := _key3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _key3, err)
		}
		_val4 := &Grouping{}
		if err := _val4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val4, err)
		}
		p.Inputs[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ComponentCommon) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*StreamInfo, size)
	p.Streams = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		_val6 := &StreamInfo{}
		if err := _val6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val6, err)
		}
		p.Streams[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ComponentCommon) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ParallelismHint = &v
	}
	return nil
}

func (p *ComponentCommon) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.JsonConf = &v
	}
	return nil
}

func (p *ComponentCommon) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComponentCommon"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComponentCommon) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputs", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:inputs: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.STRUCT, len(p.Inputs)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Inputs {
		if err := k.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", k, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:inputs: %s", p, err)
	}
	return err
}

func (p *ComponentCommon) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("streams", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:streams: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Streams)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Streams {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:streams: %s", p, err)
	}
	return err
}

func (p *ComponentCommon) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelismHint() {
		if err := oprot.WriteFieldBegin("parallelism_hint", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:parallelism_hint: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ParallelismHint)); err != nil {
			return fmt.Errorf("%T.parallelism_hint (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:parallelism_hint: %s", p, err)
		}
	}
	return err
}

func (p *ComponentCommon) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJsonConf() {
		if err := oprot.WriteFieldBegin("json_conf", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:json_conf: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.JsonConf)); err != nil {
			return fmt.Errorf("%T.json_conf (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:json_conf: %s", p, err)
		}
	}
	return err
}

func (p *ComponentCommon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentCommon(%+v)", *p)
}

type SpoutSpec struct {
	SpoutObject *ComponentObject `thrift:"spout_object,1,required" json:"spout_object"`
	Common      *ComponentCommon `thrift:"common,2,required" json:"common"`
}

func NewSpoutSpec() *SpoutSpec {
	return &SpoutSpec{}
}

var SpoutSpec_SpoutObject_DEFAULT *ComponentObject

func (p *SpoutSpec) GetSpoutObject() *ComponentObject {
	if !p.IsSetSpoutObject() {
		return SpoutSpec_SpoutObject_DEFAULT
	}
	return p.SpoutObject
}

var SpoutSpec_Common_DEFAULT *ComponentCommon

func (p *SpoutSpec) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return SpoutSpec_Common_DEFAULT
	}
	return p.Common
}
func (p *SpoutSpec) IsSetSpoutObject() bool {
	return p.SpoutObject != nil
}

func (p *SpoutSpec) IsSetCommon() bool {
	return p.Common != nil
}

func (p *SpoutSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SpoutSpec) ReadField1(iprot thrift.TProtocol) error {
	p.SpoutObject = &ComponentObject{}
	if err := p.SpoutObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SpoutObject, err)
	}
	return nil
}

func (p *SpoutSpec) ReadField2(iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Common, err)
	}
	return nil
}

func (p *SpoutSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SpoutSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SpoutSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spout_object", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:spout_object: %s", p, err)
	}
	if err := p.SpoutObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SpoutObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:spout_object: %s", p, err)
	}
	return err
}

func (p *SpoutSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:common: %s", p, err)
	}
	if err := p.Common.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Common, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:common: %s", p, err)
	}
	return err
}

func (p *SpoutSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpoutSpec(%+v)", *p)
}

type Bolt struct {
	BoltObject *ComponentObject `thrift:"bolt_object,1,required" json:"bolt_object"`
	Common     *ComponentCommon `thrift:"common,2,required" json:"common"`
}

func NewBolt() *Bolt {
	return &Bolt{}
}

var Bolt_BoltObject_DEFAULT *ComponentObject

func (p *Bolt) GetBoltObject() *ComponentObject {
	if !p.IsSetBoltObject() {
		return Bolt_BoltObject_DEFAULT
	}
	return p.BoltObject
}

var Bolt_Common_DEFAULT *ComponentCommon

func (p *Bolt) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return Bolt_Common_DEFAULT
	}
	return p.Common
}
func (p *Bolt) IsSetBoltObject() bool {
	return p.BoltObject != nil
}

func (p *Bolt) IsSetCommon() bool {
	return p.Common != nil
}

func (p *Bolt) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Bolt) ReadField1(iprot thrift.TProtocol) error {
	p.BoltObject = &ComponentObject{}
	if err := p.BoltObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BoltObject, err)
	}
	return nil
}

func (p *Bolt) ReadField2(iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Common, err)
	}
	return nil
}

func (p *Bolt) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Bolt"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Bolt) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bolt_object", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:bolt_object: %s", p, err)
	}
	if err := p.BoltObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BoltObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:bolt_object: %s", p, err)
	}
	return err
}

func (p *Bolt) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:common: %s", p, err)
	}
	if err := p.Common.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Common, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:common: %s", p, err)
	}
	return err
}

func (p *Bolt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bolt(%+v)", *p)
}

type StateSpoutSpec struct {
	StateSpoutObject *ComponentObject `thrift:"state_spout_object,1,required" json:"state_spout_object"`
	Common           *ComponentCommon `thrift:"common,2,required" json:"common"`
}

func NewStateSpoutSpec() *StateSpoutSpec {
	return &StateSpoutSpec{}
}

var StateSpoutSpec_StateSpoutObject_DEFAULT *ComponentObject

func (p *StateSpoutSpec) GetStateSpoutObject() *ComponentObject {
	if !p.IsSetStateSpoutObject() {
		return StateSpoutSpec_StateSpoutObject_DEFAULT
	}
	return p.StateSpoutObject
}

var StateSpoutSpec_Common_DEFAULT *ComponentCommon

func (p *StateSpoutSpec) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return StateSpoutSpec_Common_DEFAULT
	}
	return p.Common
}
func (p *StateSpoutSpec) IsSetStateSpoutObject() bool {
	return p.StateSpoutObject != nil
}

func (p *StateSpoutSpec) IsSetCommon() bool {
	return p.Common != nil
}

func (p *StateSpoutSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StateSpoutSpec) ReadField1(iprot thrift.TProtocol) error {
	p.StateSpoutObject = &ComponentObject{}
	if err := p.StateSpoutObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.StateSpoutObject, err)
	}
	return nil
}

func (p *StateSpoutSpec) ReadField2(iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Common, err)
	}
	return nil
}

func (p *StateSpoutSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StateSpoutSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StateSpoutSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state_spout_object", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:state_spout_object: %s", p, err)
	}
	if err := p.StateSpoutObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.StateSpoutObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:state_spout_object: %s", p, err)
	}
	return err
}

func (p *StateSpoutSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:common: %s", p, err)
	}
	if err := p.Common.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Common, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:common: %s", p, err)
	}
	return err
}

func (p *StateSpoutSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StateSpoutSpec(%+v)", *p)
}

type StormTopology struct {
	Spouts      map[string]*SpoutSpec      `thrift:"spouts,1,required" json:"spouts"`
	Bolts       map[string]*Bolt           `thrift:"bolts,2,required" json:"bolts"`
	StateSpouts map[string]*StateSpoutSpec `thrift:"state_spouts,3,required" json:"state_spouts"`
}

func NewStormTopology() *StormTopology {
	return &StormTopology{}
}

func (p *StormTopology) GetSpouts() map[string]*SpoutSpec {
	return p.Spouts
}

func (p *StormTopology) GetBolts() map[string]*Bolt {
	return p.Bolts
}

func (p *StormTopology) GetStateSpouts() map[string]*StateSpoutSpec {
	return p.StateSpouts
}
func (p *StormTopology) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StormTopology) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*SpoutSpec, size)
	p.Spouts = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		_val8 := &SpoutSpec{}
		if err := _val8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val8, err)
		}
		p.Spouts[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StormTopology) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Bolt, size)
	p.Bolts = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		_val10 := &Bolt{}
		if err := _val10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val10, err)
		}
		p.Bolts[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StormTopology) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*StateSpoutSpec, size)
	p.StateSpouts = tMap
	for i := 0; i < size; i++ {
		var _key11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key11 = v
		}
		_val12 := &StateSpoutSpec{}
		if err := _val12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val12, err)
		}
		p.StateSpouts[_key11] = _val12
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StormTopology) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StormTopology"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StormTopology) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spouts", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:spouts: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Spouts)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Spouts {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:spouts: %s", p, err)
	}
	return err
}

func (p *StormTopology) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bolts", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:bolts: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Bolts)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Bolts {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:bolts: %s", p, err)
	}
	return err
}

func (p *StormTopology) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state_spouts", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:state_spouts: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StateSpouts)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.StateSpouts {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:state_spouts: %s", p, err)
	}
	return err
}

func (p *StormTopology) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StormTopology(%+v)", *p)
}

type AlreadyAliveException struct {
	Msg string `thrift:"msg,1,required" json:"msg"`
}

func NewAlreadyAliveException() *AlreadyAliveException {
	return &AlreadyAliveException{}
}

func (p *AlreadyAliveException) GetMsg() string {
	return p.Msg
}
func (p *AlreadyAliveException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlreadyAliveException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AlreadyAliveException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlreadyAliveException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlreadyAliveException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *AlreadyAliveException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyAliveException(%+v)", *p)
}

func (p *AlreadyAliveException) Error() string {
	return p.String()
}

type NotAliveException struct {
	Msg string `thrift:"msg,1,required" json:"msg"`
}

func NewNotAliveException() *NotAliveException {
	return &NotAliveException{}
}

func (p *NotAliveException) GetMsg() string {
	return p.Msg
}
func (p *NotAliveException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotAliveException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *NotAliveException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotAliveException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotAliveException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *NotAliveException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotAliveException(%+v)", *p)
}

func (p *NotAliveException) Error() string {
	return p.String()
}

type AuthorizationException struct {
	Msg string `thrift:"msg,1,required" json:"msg"`
}

func NewAuthorizationException() *AuthorizationException {
	return &AuthorizationException{}
}

func (p *AuthorizationException) GetMsg() string {
	return p.Msg
}
func (p *AuthorizationException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AuthorizationException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AuthorizationException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthorizationException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AuthorizationException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *AuthorizationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthorizationException(%+v)", *p)
}

func (p *AuthorizationException) Error() string {
	return p.String()
}

type InvalidTopologyException struct {
	Msg string `thrift:"msg,1,required" json:"msg"`
}

func NewInvalidTopologyException() *InvalidTopologyException {
	return &InvalidTopologyException{}
}

func (p *InvalidTopologyException) GetMsg() string {
	return p.Msg
}
func (p *InvalidTopologyException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidTopologyException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *InvalidTopologyException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidTopologyException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidTopologyException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *InvalidTopologyException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidTopologyException(%+v)", *p)
}

func (p *InvalidTopologyException) Error() string {
	return p.String()
}

type TopologySummary struct {
	Id           string `thrift:"id,1,required" json:"id"`
	Name         string `thrift:"name,2,required" json:"name"`
	NumTasks     int32  `thrift:"num_tasks,3,required" json:"num_tasks"`
	NumExecutors int32  `thrift:"num_executors,4,required" json:"num_executors"`
	NumWorkers   int32  `thrift:"num_workers,5,required" json:"num_workers"`
	UptimeSecs   int32  `thrift:"uptime_secs,6,required" json:"uptime_secs"`
	Status       string `thrift:"status,7,required" json:"status"`
	// unused fields # 8 to 512
	SchedStatus *string `thrift:"sched_status,513" json:"sched_status"`
	Owner       *string `thrift:"owner,514" json:"owner"`
}

func NewTopologySummary() *TopologySummary {
	return &TopologySummary{}
}

func (p *TopologySummary) GetId() string {
	return p.Id
}

func (p *TopologySummary) GetName() string {
	return p.Name
}

func (p *TopologySummary) GetNumTasks() int32 {
	return p.NumTasks
}

func (p *TopologySummary) GetNumExecutors() int32 {
	return p.NumExecutors
}

func (p *TopologySummary) GetNumWorkers() int32 {
	return p.NumWorkers
}

func (p *TopologySummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *TopologySummary) GetStatus() string {
	return p.Status
}

var TopologySummary_SchedStatus_DEFAULT string

func (p *TopologySummary) GetSchedStatus() string {
	if !p.IsSetSchedStatus() {
		return TopologySummary_SchedStatus_DEFAULT
	}
	return *p.SchedStatus
}

var TopologySummary_Owner_DEFAULT string

func (p *TopologySummary) GetOwner() string {
	if !p.IsSetOwner() {
		return TopologySummary_Owner_DEFAULT
	}
	return *p.Owner
}
func (p *TopologySummary) IsSetSchedStatus() bool {
	return p.SchedStatus != nil
}

func (p *TopologySummary) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *TopologySummary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 513:
			if err := p.ReadField513(iprot); err != nil {
				return err
			}
		case 514:
			if err := p.ReadField514(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopologySummary) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *TopologySummary) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TopologySummary) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumTasks = v
	}
	return nil
}

func (p *TopologySummary) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumExecutors = v
	}
	return nil
}

func (p *TopologySummary) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.NumWorkers = v
	}
	return nil
}

func (p *TopologySummary) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *TopologySummary) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TopologySummary) ReadField513(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 513: %s", err)
	} else {
		p.SchedStatus = &v
	}
	return nil
}

func (p *TopologySummary) ReadField514(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 514: %s", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *TopologySummary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopologySummary"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField513(oprot); err != nil {
		return err
	}
	if err := p.writeField514(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopologySummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_tasks", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:num_tasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumTasks)); err != nil {
		return fmt.Errorf("%T.num_tasks (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:num_tasks: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_executors", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:num_executors: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumExecutors)); err != nil {
		return fmt.Errorf("%T.num_executors (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:num_executors: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_workers", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:num_workers: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumWorkers)); err != nil {
		return fmt.Errorf("%T.num_workers (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:num_workers: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uptime_secs", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:uptime_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UptimeSecs)); err != nil {
		return fmt.Errorf("%T.uptime_secs (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:uptime_secs: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:status: %s", p, err)
	}
	return err
}

func (p *TopologySummary) writeField513(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedStatus() {
		if err := oprot.WriteFieldBegin("sched_status", thrift.STRING, 513); err != nil {
			return fmt.Errorf("%T write field begin error 513:sched_status: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SchedStatus)); err != nil {
			return fmt.Errorf("%T.sched_status (513) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 513:sched_status: %s", p, err)
		}
	}
	return err
}

func (p *TopologySummary) writeField514(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin("owner", thrift.STRING, 514); err != nil {
			return fmt.Errorf("%T write field begin error 514:owner: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Owner)); err != nil {
			return fmt.Errorf("%T.owner (514) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 514:owner: %s", p, err)
		}
	}
	return err
}

func (p *TopologySummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologySummary(%+v)", *p)
}

type SupervisorSummary struct {
	Host           string `thrift:"host,1,required" json:"host"`
	UptimeSecs     int32  `thrift:"uptime_secs,2,required" json:"uptime_secs"`
	NumWorkers     int32  `thrift:"num_workers,3,required" json:"num_workers"`
	NumUsedWorkers int32  `thrift:"num_used_workers,4,required" json:"num_used_workers"`
	SupervisorId   string `thrift:"supervisor_id,5,required" json:"supervisor_id"`
}

func NewSupervisorSummary() *SupervisorSummary {
	return &SupervisorSummary{}
}

func (p *SupervisorSummary) GetHost() string {
	return p.Host
}

func (p *SupervisorSummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *SupervisorSummary) GetNumWorkers() int32 {
	return p.NumWorkers
}

func (p *SupervisorSummary) GetNumUsedWorkers() int32 {
	return p.NumUsedWorkers
}

func (p *SupervisorSummary) GetSupervisorId() string {
	return p.SupervisorId
}
func (p *SupervisorSummary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SupervisorSummary) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.NumWorkers = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.NumUsedWorkers = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.SupervisorId = v
	}
	return nil
}

func (p *SupervisorSummary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SupervisorSummary"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SupervisorSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:host: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return fmt.Errorf("%T.host (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:host: %s", p, err)
	}
	return err
}

func (p *SupervisorSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uptime_secs", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uptime_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UptimeSecs)); err != nil {
		return fmt.Errorf("%T.uptime_secs (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uptime_secs: %s", p, err)
	}
	return err
}

func (p *SupervisorSummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_workers", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:num_workers: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumWorkers)); err != nil {
		return fmt.Errorf("%T.num_workers (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:num_workers: %s", p, err)
	}
	return err
}

func (p *SupervisorSummary) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_used_workers", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:num_used_workers: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumUsedWorkers)); err != nil {
		return fmt.Errorf("%T.num_used_workers (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:num_used_workers: %s", p, err)
	}
	return err
}

func (p *SupervisorSummary) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("supervisor_id", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:supervisor_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SupervisorId)); err != nil {
		return fmt.Errorf("%T.supervisor_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:supervisor_id: %s", p, err)
	}
	return err
}

func (p *SupervisorSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSummary(%+v)", *p)
}

type ClusterSummary struct {
	Supervisors      []*SupervisorSummary `thrift:"supervisors,1,required" json:"supervisors"`
	NimbusUptimeSecs int32                `thrift:"nimbus_uptime_secs,2,required" json:"nimbus_uptime_secs"`
	Topologies       []*TopologySummary   `thrift:"topologies,3,required" json:"topologies"`
}

func NewClusterSummary() *ClusterSummary {
	return &ClusterSummary{}
}

func (p *ClusterSummary) GetSupervisors() []*SupervisorSummary {
	return p.Supervisors
}

func (p *ClusterSummary) GetNimbusUptimeSecs() int32 {
	return p.NimbusUptimeSecs
}

func (p *ClusterSummary) GetTopologies() []*TopologySummary {
	return p.Topologies
}
func (p *ClusterSummary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClusterSummary) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SupervisorSummary, 0, size)
	p.Supervisors = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &SupervisorSummary{}
		if err := _elem13.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem13, err)
		}
		p.Supervisors = append(p.Supervisors, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ClusterSummary) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NimbusUptimeSecs = v
	}
	return nil
}

func (p *ClusterSummary) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TopologySummary, 0, size)
	p.Topologies = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &TopologySummary{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.Topologies = append(p.Topologies, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ClusterSummary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClusterSummary"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ClusterSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("supervisors", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:supervisors: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Supervisors)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Supervisors {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:supervisors: %s", p, err)
	}
	return err
}

func (p *ClusterSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nimbus_uptime_secs", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nimbus_uptime_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NimbusUptimeSecs)); err != nil {
		return fmt.Errorf("%T.nimbus_uptime_secs (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nimbus_uptime_secs: %s", p, err)
	}
	return err
}

func (p *ClusterSummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topologies", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:topologies: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Topologies)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Topologies {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:topologies: %s", p, err)
	}
	return err
}

func (p *ClusterSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterSummary(%+v)", *p)
}

type ErrorInfo struct {
	ErrorA1       string  `thrift:"error,1,required" json:"error"`
	ErrorTimeSecs int32   `thrift:"error_time_secs,2,required" json:"error_time_secs"`
	Host          *string `thrift:"host,3" json:"host"`
	Port          *int32  `thrift:"port,4" json:"port"`
}

func NewErrorInfo() *ErrorInfo {
	return &ErrorInfo{}
}

func (p *ErrorInfo) GetErrorA1() string {
	return p.ErrorA1
}

func (p *ErrorInfo) GetErrorTimeSecs() int32 {
	return p.ErrorTimeSecs
}

var ErrorInfo_Host_DEFAULT string

func (p *ErrorInfo) GetHost() string {
	if !p.IsSetHost() {
		return ErrorInfo_Host_DEFAULT
	}
	return *p.Host
}

var ErrorInfo_Port_DEFAULT int32

func (p *ErrorInfo) GetPort() int32 {
	if !p.IsSetPort() {
		return ErrorInfo_Port_DEFAULT
	}
	return *p.Port
}
func (p *ErrorInfo) IsSetHost() bool {
	return p.Host != nil
}

func (p *ErrorInfo) IsSetPort() bool {
	return p.Port != nil
}

func (p *ErrorInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ErrorInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *ErrorInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorTimeSecs = v
	}
	return nil
}

func (p *ErrorInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Host = &v
	}
	return nil
}

func (p *ErrorInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *ErrorInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrorInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ErrorInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:error: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorA1)); err != nil {
		return fmt.Errorf("%T.error (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:error: %s", p, err)
	}
	return err
}

func (p *ErrorInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_time_secs", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_time_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorTimeSecs)); err != nil {
		return fmt.Errorf("%T.error_time_secs (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_time_secs: %s", p, err)
	}
	return err
}

func (p *ErrorInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err := oprot.WriteFieldBegin("host", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:host: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Host)); err != nil {
			return fmt.Errorf("%T.host (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:host: %s", p, err)
		}
	}
	return err
}

func (p *ErrorInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:port: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Port)); err != nil {
			return fmt.Errorf("%T.port (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:port: %s", p, err)
		}
	}
	return err
}

func (p *ErrorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrorInfo(%+v)", *p)
}

type BoltStats struct {
	Acked        map[string]map[*GlobalStreamId]int64   `thrift:"acked,1,required" json:"acked"`
	Failed       map[string]map[*GlobalStreamId]int64   `thrift:"failed,2,required" json:"failed"`
	ProcessMsAvg map[string]map[*GlobalStreamId]float64 `thrift:"process_ms_avg,3,required" json:"process_ms_avg"`
	Executed     map[string]map[*GlobalStreamId]int64   `thrift:"executed,4,required" json:"executed"`
	ExecuteMsAvg map[string]map[*GlobalStreamId]float64 `thrift:"execute_ms_avg,5,required" json:"execute_ms_avg"`
}

func NewBoltStats() *BoltStats {
	return &BoltStats{}
}

func (p *BoltStats) GetAcked() map[string]map[*GlobalStreamId]int64 {
	return p.Acked
}

func (p *BoltStats) GetFailed() map[string]map[*GlobalStreamId]int64 {
	return p.Failed
}

func (p *BoltStats) GetProcessMsAvg() map[string]map[*GlobalStreamId]float64 {
	return p.ProcessMsAvg
}

func (p *BoltStats) GetExecuted() map[string]map[*GlobalStreamId]int64 {
	return p.Executed
}

func (p *BoltStats) GetExecuteMsAvg() map[string]map[*GlobalStreamId]float64 {
	return p.ExecuteMsAvg
}
func (p *BoltStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BoltStats) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Acked = tMap
	for i := 0; i < size; i++ {
		var _key15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key15 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val16 := tMap
		for i := 0; i < size; i++ {
			_key17 := &GlobalStreamId{}
			if err := _key17.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _key17, err)
			}
			var _val18 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val18 = v
			}
			_val16[_key17] = _val18
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Acked[_key15] = _val16
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *BoltStats) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Failed = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key19 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val20 := tMap
		for i := 0; i < size; i++ {
			_key21 := &GlobalStreamId{}
			if err := _key21.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _key21, err)
			}
			var _val22 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val22 = v
			}
			_val20[_key21] = _val22
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Failed[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *BoltStats) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]float64, size)
	p.ProcessMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key23 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[*GlobalStreamId]float64, size)
		_val24 := tMap
		for i := 0; i < size; i++ {
			_key25 := &GlobalStreamId{}
			if err := _key25.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _key25, err)
			}
			var _val26 float64
			if v, err := iprot.ReadDouble(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val26 = v
			}
			_val24[_key25] = _val26
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.ProcessMsAvg[_key23] = _val24
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *BoltStats) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Executed = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key27 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val28 := tMap
		for i := 0; i < size; i++ {
			_key29 := &GlobalStreamId{}
			if err := _key29.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _key29, err)
			}
			var _val30 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val30 = v
			}
			_val28[_key29] = _val30
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Executed[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *BoltStats) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]float64, size)
	p.ExecuteMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key31 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key31 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[*GlobalStreamId]float64, size)
		_val32 := tMap
		for i := 0; i < size; i++ {
			_key33 := &GlobalStreamId{}
			if err := _key33.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _key33, err)
			}
			var _val34 float64
			if v, err := iprot.ReadDouble(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val34 = v
			}
			_val32[_key33] = _val34
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.ExecuteMsAvg[_key31] = _val32
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *BoltStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BoltStats"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BoltStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acked", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:acked: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Acked)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Acked {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:acked: %s", p, err)
	}
	return err
}

func (p *BoltStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Failed {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *BoltStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("process_ms_avg", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:process_ms_avg: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.ProcessMsAvg)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ProcessMsAvg {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.DOUBLE, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:process_ms_avg: %s", p, err)
	}
	return err
}

func (p *BoltStats) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("executed", thrift.MAP, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:executed: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Executed)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Executed {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:executed: %s", p, err)
	}
	return err
}

func (p *BoltStats) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execute_ms_avg", thrift.MAP, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:execute_ms_avg: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.ExecuteMsAvg)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ExecuteMsAvg {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.DOUBLE, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:execute_ms_avg: %s", p, err)
	}
	return err
}

func (p *BoltStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoltStats(%+v)", *p)
}

type SpoutStats struct {
	Acked         map[string]map[string]int64   `thrift:"acked,1,required" json:"acked"`
	Failed        map[string]map[string]int64   `thrift:"failed,2,required" json:"failed"`
	CompleteMsAvg map[string]map[string]float64 `thrift:"complete_ms_avg,3,required" json:"complete_ms_avg"`
}

func NewSpoutStats() *SpoutStats {
	return &SpoutStats{}
}

func (p *SpoutStats) GetAcked() map[string]map[string]int64 {
	return p.Acked
}

func (p *SpoutStats) GetFailed() map[string]map[string]int64 {
	return p.Failed
}

func (p *SpoutStats) GetCompleteMsAvg() map[string]map[string]float64 {
	return p.CompleteMsAvg
}
func (p *SpoutStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SpoutStats) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Acked = tMap
	for i := 0; i < size; i++ {
		var _key35 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key35 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]int64, size)
		_val36 := tMap
		for i := 0; i < size; i++ {
			var _key37 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key37 = v
			}
			var _val38 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val38 = v
			}
			_val36[_key37] = _val38
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Acked[_key35] = _val36
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SpoutStats) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Failed = tMap
	for i := 0; i < size; i++ {
		var _key39 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key39 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]int64, size)
		_val40 := tMap
		for i := 0; i < size; i++ {
			var _key41 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key41 = v
			}
			var _val42 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val42 = v
			}
			_val40[_key41] = _val42
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Failed[_key39] = _val40
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SpoutStats) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[string]float64, size)
	p.CompleteMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key43 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]float64, size)
		_val44 := tMap
		for i := 0; i < size; i++ {
			var _key45 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key45 = v
			}
			var _val46 float64
			if v, err := iprot.ReadDouble(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val46 = v
			}
			_val44[_key45] = _val46
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.CompleteMsAvg[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SpoutStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SpoutStats"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SpoutStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acked", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:acked: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Acked)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Acked {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:acked: %s", p, err)
	}
	return err
}

func (p *SpoutStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failed", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failed: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Failed)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Failed {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failed: %s", p, err)
	}
	return err
}

func (p *SpoutStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("complete_ms_avg", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:complete_ms_avg: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.CompleteMsAvg)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.CompleteMsAvg {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:complete_ms_avg: %s", p, err)
	}
	return err
}

func (p *SpoutStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpoutStats(%+v)", *p)
}

type ExecutorSpecificStats struct {
	Bolt  *BoltStats  `thrift:"bolt,1" json:"bolt"`
	Spout *SpoutStats `thrift:"spout,2" json:"spout"`
}

func NewExecutorSpecificStats() *ExecutorSpecificStats {
	return &ExecutorSpecificStats{}
}

var ExecutorSpecificStats_Bolt_DEFAULT *BoltStats

func (p *ExecutorSpecificStats) GetBolt() *BoltStats {
	if !p.IsSetBolt() {
		return ExecutorSpecificStats_Bolt_DEFAULT
	}
	return p.Bolt
}

var ExecutorSpecificStats_Spout_DEFAULT *SpoutStats

func (p *ExecutorSpecificStats) GetSpout() *SpoutStats {
	if !p.IsSetSpout() {
		return ExecutorSpecificStats_Spout_DEFAULT
	}
	return p.Spout
}
func (p *ExecutorSpecificStats) IsSetBolt() bool {
	return p.Bolt != nil
}

func (p *ExecutorSpecificStats) IsSetSpout() bool {
	return p.Spout != nil
}

func (p *ExecutorSpecificStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecutorSpecificStats) ReadField1(iprot thrift.TProtocol) error {
	p.Bolt = &BoltStats{}
	if err := p.Bolt.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Bolt, err)
	}
	return nil
}

func (p *ExecutorSpecificStats) ReadField2(iprot thrift.TProtocol) error {
	p.Spout = &SpoutStats{}
	if err := p.Spout.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Spout, err)
	}
	return nil
}

func (p *ExecutorSpecificStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutorSpecificStats"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecutorSpecificStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bolt", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:bolt: %s", p, err)
	}
	if err := p.Bolt.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Bolt, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:bolt: %s", p, err)
	}
	return err
}

func (p *ExecutorSpecificStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spout", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:spout: %s", p, err)
	}
	if err := p.Spout.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Spout, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:spout: %s", p, err)
	}
	return err
}

func (p *ExecutorSpecificStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorSpecificStats(%+v)", *p)
}

type ExecutorStats struct {
	Emitted     map[string]map[string]int64 `thrift:"emitted,1,required" json:"emitted"`
	Transferred map[string]map[string]int64 `thrift:"transferred,2,required" json:"transferred"`
	Specific    *ExecutorSpecificStats      `thrift:"specific,3,required" json:"specific"`
}

func NewExecutorStats() *ExecutorStats {
	return &ExecutorStats{}
}

func (p *ExecutorStats) GetEmitted() map[string]map[string]int64 {
	return p.Emitted
}

func (p *ExecutorStats) GetTransferred() map[string]map[string]int64 {
	return p.Transferred
}

var ExecutorStats_Specific_DEFAULT *ExecutorSpecificStats

func (p *ExecutorStats) GetSpecific() *ExecutorSpecificStats {
	if !p.IsSetSpecific() {
		return ExecutorStats_Specific_DEFAULT
	}
	return p.Specific
}
func (p *ExecutorStats) IsSetSpecific() bool {
	return p.Specific != nil
}

func (p *ExecutorStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecutorStats) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Emitted = tMap
	for i := 0; i < size; i++ {
		var _key47 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key47 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]int64, size)
		_val48 := tMap
		for i := 0; i < size; i++ {
			var _key49 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key49 = v
			}
			var _val50 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val50 = v
			}
			_val48[_key49] = _val50
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Emitted[_key47] = _val48
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ExecutorStats) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Transferred = tMap
	for i := 0; i < size; i++ {
		var _key51 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key51 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]int64, size)
		_val52 := tMap
		for i := 0; i < size; i++ {
			var _key53 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key53 = v
			}
			var _val54 int64
			if v, err := iprot.ReadI64(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val54 = v
			}
			_val52[_key53] = _val54
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.Transferred[_key51] = _val52
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ExecutorStats) ReadField3(iprot thrift.TProtocol) error {
	p.Specific = &ExecutorSpecificStats{}
	if err := p.Specific.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Specific, err)
	}
	return nil
}

func (p *ExecutorStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutorStats"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecutorStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("emitted", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:emitted: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Emitted)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Emitted {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:emitted: %s", p, err)
	}
	return err
}

func (p *ExecutorStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transferred", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transferred: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Transferred)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Transferred {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transferred: %s", p, err)
	}
	return err
}

func (p *ExecutorStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("specific", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:specific: %s", p, err)
	}
	if err := p.Specific.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Specific, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:specific: %s", p, err)
	}
	return err
}

func (p *ExecutorStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorStats(%+v)", *p)
}

type ExecutorInfo struct {
	TaskStart int32 `thrift:"task_start,1,required" json:"task_start"`
	TaskEnd   int32 `thrift:"task_end,2,required" json:"task_end"`
}

func NewExecutorInfo() *ExecutorInfo {
	return &ExecutorInfo{}
}

func (p *ExecutorInfo) GetTaskStart() int32 {
	return p.TaskStart
}

func (p *ExecutorInfo) GetTaskEnd() int32 {
	return p.TaskEnd
}
func (p *ExecutorInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecutorInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskStart = v
	}
	return nil
}

func (p *ExecutorInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TaskEnd = v
	}
	return nil
}

func (p *ExecutorInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutorInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecutorInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task_start", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:task_start: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskStart)); err != nil {
		return fmt.Errorf("%T.task_start (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:task_start: %s", p, err)
	}
	return err
}

func (p *ExecutorInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("task_end", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:task_end: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskEnd)); err != nil {
		return fmt.Errorf("%T.task_end (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:task_end: %s", p, err)
	}
	return err
}

func (p *ExecutorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorInfo(%+v)", *p)
}

type ExecutorSummary struct {
	ExecutorInfo *ExecutorInfo `thrift:"executor_info,1,required" json:"executor_info"`
	ComponentId  string        `thrift:"component_id,2,required" json:"component_id"`
	Host         string        `thrift:"host,3,required" json:"host"`
	Port         int32         `thrift:"port,4,required" json:"port"`
	UptimeSecs   int32         `thrift:"uptime_secs,5,required" json:"uptime_secs"`
	// unused field # 6
	Stats *ExecutorStats `thrift:"stats,7" json:"stats"`
}

func NewExecutorSummary() *ExecutorSummary {
	return &ExecutorSummary{}
}

var ExecutorSummary_ExecutorInfo_DEFAULT *ExecutorInfo

func (p *ExecutorSummary) GetExecutorInfo() *ExecutorInfo {
	if !p.IsSetExecutorInfo() {
		return ExecutorSummary_ExecutorInfo_DEFAULT
	}
	return p.ExecutorInfo
}

func (p *ExecutorSummary) GetComponentId() string {
	return p.ComponentId
}

func (p *ExecutorSummary) GetHost() string {
	return p.Host
}

func (p *ExecutorSummary) GetPort() int32 {
	return p.Port
}

func (p *ExecutorSummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

var ExecutorSummary_Stats_DEFAULT *ExecutorStats

func (p *ExecutorSummary) GetStats() *ExecutorStats {
	if !p.IsSetStats() {
		return ExecutorSummary_Stats_DEFAULT
	}
	return p.Stats
}
func (p *ExecutorSummary) IsSetExecutorInfo() bool {
	return p.ExecutorInfo != nil
}

func (p *ExecutorSummary) IsSetStats() bool {
	return p.Stats != nil
}

func (p *ExecutorSummary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecutorSummary) ReadField1(iprot thrift.TProtocol) error {
	p.ExecutorInfo = &ExecutorInfo{}
	if err := p.ExecutorInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ExecutorInfo, err)
	}
	return nil
}

func (p *ExecutorSummary) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ComponentId = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField7(iprot thrift.TProtocol) error {
	p.Stats = &ExecutorStats{}
	if err := p.Stats.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Stats, err)
	}
	return nil
}

func (p *ExecutorSummary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutorSummary"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecutorSummary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("executor_info", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:executor_info: %s", p, err)
	}
	if err := p.ExecutorInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ExecutorInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:executor_info: %s", p, err)
	}
	return err
}

func (p *ExecutorSummary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("component_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:component_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComponentId)); err != nil {
		return fmt.Errorf("%T.component_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:component_id: %s", p, err)
	}
	return err
}

func (p *ExecutorSummary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:host: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return fmt.Errorf("%T.host (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:host: %s", p, err)
	}
	return err
}

func (p *ExecutorSummary) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:port: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return fmt.Errorf("%T.port (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:port: %s", p, err)
	}
	return err
}

func (p *ExecutorSummary) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uptime_secs", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:uptime_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UptimeSecs)); err != nil {
		return fmt.Errorf("%T.uptime_secs (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:uptime_secs: %s", p, err)
	}
	return err
}

func (p *ExecutorSummary) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStats() {
		if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:stats: %s", p, err)
		}
		if err := p.Stats.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Stats, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:stats: %s", p, err)
		}
	}
	return err
}

func (p *ExecutorSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorSummary(%+v)", *p)
}

type TopologyInfo struct {
	Id         string                  `thrift:"id,1,required" json:"id"`
	Name       string                  `thrift:"name,2,required" json:"name"`
	UptimeSecs int32                   `thrift:"uptime_secs,3,required" json:"uptime_secs"`
	Executors  []*ExecutorSummary      `thrift:"executors,4,required" json:"executors"`
	Status     string                  `thrift:"status,5,required" json:"status"`
	Errors     map[string][]*ErrorInfo `thrift:"errors,6,required" json:"errors"`
	// unused fields # 7 to 512
	SchedStatus *string `thrift:"sched_status,513" json:"sched_status"`
	Owner       *string `thrift:"owner,514" json:"owner"`
}

func NewTopologyInfo() *TopologyInfo {
	return &TopologyInfo{}
}

func (p *TopologyInfo) GetId() string {
	return p.Id
}

func (p *TopologyInfo) GetName() string {
	return p.Name
}

func (p *TopologyInfo) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *TopologyInfo) GetExecutors() []*ExecutorSummary {
	return p.Executors
}

func (p *TopologyInfo) GetStatus() string {
	return p.Status
}

func (p *TopologyInfo) GetErrors() map[string][]*ErrorInfo {
	return p.Errors
}

var TopologyInfo_SchedStatus_DEFAULT string

func (p *TopologyInfo) GetSchedStatus() string {
	if !p.IsSetSchedStatus() {
		return TopologyInfo_SchedStatus_DEFAULT
	}
	return *p.SchedStatus
}

var TopologyInfo_Owner_DEFAULT string

func (p *TopologyInfo) GetOwner() string {
	if !p.IsSetOwner() {
		return TopologyInfo_Owner_DEFAULT
	}
	return *p.Owner
}
func (p *TopologyInfo) IsSetSchedStatus() bool {
	return p.SchedStatus != nil
}

func (p *TopologyInfo) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *TopologyInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 513:
			if err := p.ReadField513(iprot); err != nil {
				return err
			}
		case 514:
			if err := p.ReadField514(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopologyInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *TopologyInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TopologyInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *TopologyInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*ExecutorSummary, 0, size)
	p.Executors = tSlice
	for i := 0; i < size; i++ {
		_elem55 := &ExecutorSummary{}
		if err := _elem55.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem55, err)
		}
		p.Executors = append(p.Executors, _elem55)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopologyInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TopologyInfo) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*ErrorInfo, size)
	p.Errors = tMap
	for i := 0; i < size; i++ {
		var _key56 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key56 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*ErrorInfo, 0, size)
		_val57 := tSlice
		for i := 0; i < size; i++ {
			_elem58 := &ErrorInfo{}
			if err := _elem58.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem58, err)
			}
			_val57 = append(_val57, _elem58)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.Errors[_key56] = _val57
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TopologyInfo) ReadField513(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 513: %s", err)
	} else {
		p.SchedStatus = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField514(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 514: %s", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *TopologyInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopologyInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField513(oprot); err != nil {
		return err
	}
	if err := p.writeField514(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopologyInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uptime_secs", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uptime_secs: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.UptimeSecs)); err != nil {
		return fmt.Errorf("%T.uptime_secs (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uptime_secs: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("executors", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:executors: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Executors)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Executors {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:executors: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:status: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errors", thrift.MAP, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:errors: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Errors)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Errors {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:errors: %s", p, err)
	}
	return err
}

func (p *TopologyInfo) writeField513(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedStatus() {
		if err := oprot.WriteFieldBegin("sched_status", thrift.STRING, 513); err != nil {
			return fmt.Errorf("%T write field begin error 513:sched_status: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SchedStatus)); err != nil {
			return fmt.Errorf("%T.sched_status (513) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 513:sched_status: %s", p, err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField514(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin("owner", thrift.STRING, 514); err != nil {
			return fmt.Errorf("%T write field begin error 514:owner: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Owner)); err != nil {
			return fmt.Errorf("%T.owner (514) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 514:owner: %s", p, err)
		}
	}
	return err
}

func (p *TopologyInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyInfo(%+v)", *p)
}

type KillOptions struct {
	WaitSecs *int32 `thrift:"wait_secs,1" json:"wait_secs"`
}

func NewKillOptions() *KillOptions {
	return &KillOptions{}
}

var KillOptions_WaitSecs_DEFAULT int32

func (p *KillOptions) GetWaitSecs() int32 {
	if !p.IsSetWaitSecs() {
		return KillOptions_WaitSecs_DEFAULT
	}
	return *p.WaitSecs
}
func (p *KillOptions) IsSetWaitSecs() bool {
	return p.WaitSecs != nil
}

func (p *KillOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KillOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.WaitSecs = &v
	}
	return nil
}

func (p *KillOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KillOptions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KillOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitSecs() {
		if err := oprot.WriteFieldBegin("wait_secs", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:wait_secs: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.WaitSecs)); err != nil {
			return fmt.Errorf("%T.wait_secs (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:wait_secs: %s", p, err)
		}
	}
	return err
}

func (p *KillOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillOptions(%+v)", *p)
}

type RebalanceOptions struct {
	WaitSecs     *int32           `thrift:"wait_secs,1" json:"wait_secs"`
	NumWorkers   *int32           `thrift:"num_workers,2" json:"num_workers"`
	NumExecutors map[string]int32 `thrift:"num_executors,3" json:"num_executors"`
}

func NewRebalanceOptions() *RebalanceOptions {
	return &RebalanceOptions{}
}

var RebalanceOptions_WaitSecs_DEFAULT int32

func (p *RebalanceOptions) GetWaitSecs() int32 {
	if !p.IsSetWaitSecs() {
		return RebalanceOptions_WaitSecs_DEFAULT
	}
	return *p.WaitSecs
}

var RebalanceOptions_NumWorkers_DEFAULT int32

func (p *RebalanceOptions) GetNumWorkers() int32 {
	if !p.IsSetNumWorkers() {
		return RebalanceOptions_NumWorkers_DEFAULT
	}
	return *p.NumWorkers
}

var RebalanceOptions_NumExecutors_DEFAULT map[string]int32

func (p *RebalanceOptions) GetNumExecutors() map[string]int32 {
	return p.NumExecutors
}
func (p *RebalanceOptions) IsSetWaitSecs() bool {
	return p.WaitSecs != nil
}

func (p *RebalanceOptions) IsSetNumWorkers() bool {
	return p.NumWorkers != nil
}

func (p *RebalanceOptions) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *RebalanceOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RebalanceOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.WaitSecs = &v
	}
	return nil
}

func (p *RebalanceOptions) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NumWorkers = &v
	}
	return nil
}

func (p *RebalanceOptions) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int32, size)
	p.NumExecutors = tMap
	for i := 0; i < size; i++ {
		var _key59 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key59 = v
		}
		var _val60 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val60 = v
		}
		p.NumExecutors[_key59] = _val60
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *RebalanceOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RebalanceOptions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RebalanceOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitSecs() {
		if err := oprot.WriteFieldBegin("wait_secs", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:wait_secs: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.WaitSecs)); err != nil {
			return fmt.Errorf("%T.wait_secs (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:wait_secs: %s", p, err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumWorkers() {
		if err := oprot.WriteFieldBegin("num_workers", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:num_workers: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.NumWorkers)); err != nil {
			return fmt.Errorf("%T.num_workers (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:num_workers: %s", p, err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin("num_executors", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:num_executors: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.NumExecutors)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.NumExecutors {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:num_executors: %s", p, err)
		}
	}
	return err
}

func (p *RebalanceOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RebalanceOptions(%+v)", *p)
}

type Credentials struct {
	Creds map[string]string `thrift:"creds,1,required" json:"creds"`
}

func NewCredentials() *Credentials {
	return &Credentials{}
}

func (p *Credentials) GetCreds() map[string]string {
	return p.Creds
}
func (p *Credentials) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Credentials) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Creds = tMap
	for i := 0; i < size; i++ {
		var _key61 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key61 = v
		}
		var _val62 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val62 = v
		}
		p.Creds[_key61] = _val62
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Credentials) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Credentials"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Credentials) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creds", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:creds: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Creds)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Creds {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:creds: %s", p, err)
	}
	return err
}

func (p *Credentials) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Credentials(%+v)", *p)
}

type SubmitOptions struct {
	InitialStatus TopologyInitialStatus `thrift:"initial_status,1,required" json:"initial_status"`
	Creds         *Credentials          `thrift:"creds,2" json:"creds"`
}

func NewSubmitOptions() *SubmitOptions {
	return &SubmitOptions{}
}

func (p *SubmitOptions) GetInitialStatus() TopologyInitialStatus {
	return p.InitialStatus
}

var SubmitOptions_Creds_DEFAULT *Credentials

func (p *SubmitOptions) GetCreds() *Credentials {
	if !p.IsSetCreds() {
		return SubmitOptions_Creds_DEFAULT
	}
	return p.Creds
}
func (p *SubmitOptions) IsSetCreds() bool {
	return p.Creds != nil
}

func (p *SubmitOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SubmitOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := TopologyInitialStatus(v)
		p.InitialStatus = temp
	}
	return nil
}

func (p *SubmitOptions) ReadField2(iprot thrift.TProtocol) error {
	p.Creds = &Credentials{}
	if err := p.Creds.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Creds, err)
	}
	return nil
}

func (p *SubmitOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SubmitOptions"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SubmitOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("initial_status", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:initial_status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.InitialStatus)); err != nil {
		return fmt.Errorf("%T.initial_status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:initial_status: %s", p, err)
	}
	return err
}

func (p *SubmitOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreds() {
		if err := oprot.WriteFieldBegin("creds", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:creds: %s", p, err)
		}
		if err := p.Creds.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Creds, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:creds: %s", p, err)
		}
	}
	return err
}

func (p *SubmitOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitOptions(%+v)", *p)
}

type DRPCRequest struct {
	FuncArgs_ string `thrift:"func_args,1,required" json:"func_args"`
	RequestId string `thrift:"request_id,2,required" json:"request_id"`
}

func NewDRPCRequest() *DRPCRequest {
	return &DRPCRequest{}
}

func (p *DRPCRequest) GetFuncArgs_() string {
	return p.FuncArgs_
}

func (p *DRPCRequest) GetRequestId() string {
	return p.RequestId
}
func (p *DRPCRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FuncArgs_ = v
	}
	return nil
}

func (p *DRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RequestId = v
	}
	return nil
}

func (p *DRPCRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DRPCRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("func_args", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:func_args: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FuncArgs_)); err != nil {
		return fmt.Errorf("%T.func_args (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:func_args: %s", p, err)
	}
	return err
}

func (p *DRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:request_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RequestId)); err != nil {
		return fmt.Errorf("%T.request_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:request_id: %s", p, err)
	}
	return err
}

func (p *DRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DRPCRequest(%+v)", *p)
}

type DRPCExecutionException struct {
	Msg string `thrift:"msg,1,required" json:"msg"`
}

func NewDRPCExecutionException() *DRPCExecutionException {
	return &DRPCExecutionException{}
}

func (p *DRPCExecutionException) GetMsg() string {
	return p.Msg
}
func (p *DRPCExecutionException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DRPCExecutionException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *DRPCExecutionException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DRPCExecutionException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DRPCExecutionException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msg: %s", p, err)
	}
	return err
}

func (p *DRPCExecutionException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DRPCExecutionException(%+v)", *p)
}

func (p *DRPCExecutionException) Error() string {
	return p.String()
}
