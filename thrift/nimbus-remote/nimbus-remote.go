// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"git.apache.org/thrift.git/lib/go/thrift"
	storm "github.com/gotgo/storm/thrift/topology"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)")
	fmt.Fprintln(os.Stderr, "  void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)")
	fmt.Fprintln(os.Stderr, "  void killTopology(string name)")
	fmt.Fprintln(os.Stderr, "  void killTopologyWithOpts(string name, KillOptions options)")
	fmt.Fprintln(os.Stderr, "  void activate(string name)")
	fmt.Fprintln(os.Stderr, "  void deactivate(string name)")
	fmt.Fprintln(os.Stderr, "  void rebalance(string name, RebalanceOptions options)")
	fmt.Fprintln(os.Stderr, "  void uploadNewCredentials(string name, Credentials creds)")
	fmt.Fprintln(os.Stderr, "  string beginFileUpload()")
	fmt.Fprintln(os.Stderr, "  void uploadChunk(string location, string chunk)")
	fmt.Fprintln(os.Stderr, "  void finishFileUpload(string location)")
	fmt.Fprintln(os.Stderr, "  string beginFileDownload(string file)")
	fmt.Fprintln(os.Stderr, "  string downloadChunk(string id)")
	fmt.Fprintln(os.Stderr, "  string getNimbusConf()")
	fmt.Fprintln(os.Stderr, "  ClusterSummary getClusterInfo()")
	fmt.Fprintln(os.Stderr, "  TopologyInfo getTopologyInfo(string id)")
	fmt.Fprintln(os.Stderr, "  string getTopologyConf(string id)")
	fmt.Fprintln(os.Stderr, "  StormTopology getTopology(string id)")
	fmt.Fprintln(os.Stderr, "  StormTopology getUserTopology(string id)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := storm.NewNimbusClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "submitTopology":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SubmitTopology requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg106 := flag.Arg(4)
		mbTrans107 := thrift.NewTMemoryBufferLen(len(arg106))
		defer mbTrans107.Close()
		_, err108 := mbTrans107.WriteString(arg106)
		if err108 != nil {
			Usage()
			return
		}
		factory109 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt110 := factory109.GetProtocol(mbTrans107)
		argvalue3 := storm.NewStormTopology()
		err111 := argvalue3.Read(jsProt110)
		if err111 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.SubmitTopology(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "submitTopologyWithOpts":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "SubmitTopologyWithOpts requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg115 := flag.Arg(4)
		mbTrans116 := thrift.NewTMemoryBufferLen(len(arg115))
		defer mbTrans116.Close()
		_, err117 := mbTrans116.WriteString(arg115)
		if err117 != nil {
			Usage()
			return
		}
		factory118 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt119 := factory118.GetProtocol(mbTrans116)
		argvalue3 := storm.NewStormTopology()
		err120 := argvalue3.Read(jsProt119)
		if err120 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg121 := flag.Arg(5)
		mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
		defer mbTrans122.Close()
		_, err123 := mbTrans122.WriteString(arg121)
		if err123 != nil {
			Usage()
			return
		}
		factory124 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt125 := factory124.GetProtocol(mbTrans122)
		argvalue4 := storm.NewSubmitOptions()
		err126 := argvalue4.Read(jsProt125)
		if err126 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.SubmitTopologyWithOpts(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "killTopology":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "KillTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.KillTopology(value0))
		fmt.Print("\n")
		break
	case "killTopologyWithOpts":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "KillTopologyWithOpts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg129 := flag.Arg(2)
		mbTrans130 := thrift.NewTMemoryBufferLen(len(arg129))
		defer mbTrans130.Close()
		_, err131 := mbTrans130.WriteString(arg129)
		if err131 != nil {
			Usage()
			return
		}
		factory132 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt133 := factory132.GetProtocol(mbTrans130)
		argvalue1 := storm.NewKillOptions()
		err134 := argvalue1.Read(jsProt133)
		if err134 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.KillTopologyWithOpts(value0, value1))
		fmt.Print("\n")
		break
	case "activate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Activate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Activate(value0))
		fmt.Print("\n")
		break
	case "deactivate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Deactivate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Deactivate(value0))
		fmt.Print("\n")
		break
	case "rebalance":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Rebalance requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg138 := flag.Arg(2)
		mbTrans139 := thrift.NewTMemoryBufferLen(len(arg138))
		defer mbTrans139.Close()
		_, err140 := mbTrans139.WriteString(arg138)
		if err140 != nil {
			Usage()
			return
		}
		factory141 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt142 := factory141.GetProtocol(mbTrans139)
		argvalue1 := storm.NewRebalanceOptions()
		err143 := argvalue1.Read(jsProt142)
		if err143 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Rebalance(value0, value1))
		fmt.Print("\n")
		break
	case "uploadNewCredentials":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadNewCredentials requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg145 := flag.Arg(2)
		mbTrans146 := thrift.NewTMemoryBufferLen(len(arg145))
		defer mbTrans146.Close()
		_, err147 := mbTrans146.WriteString(arg145)
		if err147 != nil {
			Usage()
			return
		}
		factory148 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt149 := factory148.GetProtocol(mbTrans146)
		argvalue1 := storm.NewCredentials()
		err150 := argvalue1.Read(jsProt149)
		if err150 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UploadNewCredentials(value0, value1))
		fmt.Print("\n")
		break
	case "beginFileUpload":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "BeginFileUpload requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.BeginFileUpload())
		fmt.Print("\n")
		break
	case "uploadChunk":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadChunk requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.UploadChunk(value0, value1))
		fmt.Print("\n")
		break
	case "finishFileUpload":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FinishFileUpload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FinishFileUpload(value0))
		fmt.Print("\n")
		break
	case "beginFileDownload":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "BeginFileDownload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.BeginFileDownload(value0))
		fmt.Print("\n")
		break
	case "downloadChunk":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DownloadChunk requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DownloadChunk(value0))
		fmt.Print("\n")
		break
	case "getNimbusConf":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetNimbusConf requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetNimbusConf())
		fmt.Print("\n")
		break
	case "getClusterInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetClusterInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetClusterInfo())
		fmt.Print("\n")
		break
	case "getTopologyInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyInfo(value0))
		fmt.Print("\n")
		break
	case "getTopologyConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyConf(value0))
		fmt.Print("\n")
		break
	case "getTopology":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopology(value0))
		fmt.Print("\n")
		break
	case "getUserTopology":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserTopology(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
